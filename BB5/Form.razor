@using System.Globalization

<form @onsubmit="HandleSubmit"
      @attributes="@Attributes">
    @foreach (var controlInfo in FormControls)
    {
        var property = controlInfo.PropertyInfo;
        var @object = controlInfo.Object; 

        <div class="mb-3">
            @if (controlInfo.HasLabel)
            {
                <InputLabel Content="@controlInfo.DisplayName"/>
            }

            @if (property.PropertyType.IsEnum)
            {
                var propertyValue = property.GetValue(@object);

                <Select Value="@(Enum.GetName(property.PropertyType, propertyValue!))"
                        Items="@(Enum.GetNames(property.PropertyType))"
                        ValueChanged="@controlInfo.SetValueAsync" />
            }

            @if (typeof(bool) == property.PropertyType)
            {
                var propertyValue = property.GetValue(Object) is true;

                <BB5.InputCheckbox Value="@propertyValue"
                                   ValueChanged="@(async value =>
                                                 {
                                                     property.SetValue(Object, value);
                                                     await OnModified.InvokeAsync();
                                                 })"/>
                <InputCheckLabel Content="@controlInfo.DisplayName"/>
            }

            @if (typeof(int) == property.PropertyType)
            {
                var intValue =
                    (int)property.GetValue(Object)!;

                var valueText =
                    Convert.ToString(
                        intValue,
                        CultureInfo.InvariantCulture);

                @if (controlInfo.IsReadOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true"/>
                }
                else
                {
                    <InputText Value="@valueText"
                               ValidationState="@controlInfo.ValidationState"
                               ValueChanged="@controlInfo.SetValueAsync" />
                }
            }
            
            @if (typeof(int?) == property.PropertyType)
            {
                var intValue =
                    (int?)property.GetValue(Object);

                var valueText =
                    intValue == null
                        ? ""
                        : Convert.ToString(
                            intValue,
                            CultureInfo.InvariantCulture);

                @if (controlInfo.IsReadOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true"/>
                }
                else
                {
                    <InputText Value="@valueText"
                               ValidationState="@controlInfo.ValidationState"
                               ValueChanged="@controlInfo.SetValueAsync" />
                }
            }


            @if (typeof(decimal) == property.PropertyType)
            {
                var decimalValue =
                    (decimal)(property.GetValue(Object) ?? 0);

                var valueText =
                    Convert.ToString(
                        decimalValue,
                        CultureInfo.InvariantCulture);

                @if (controlInfo.IsReadOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true"/>
                }
                else
                {
                    <InputText Value="@valueText"
                               ValidationState="@controlInfo.ValidationState"
                               ValueChanged="@controlInfo.SetValueAsync" />
                }
            }
            
            @if (typeof(decimal?) == property.PropertyType)
            {
                var decimalValue =
                    (decimal?)property.GetValue(Object);

                var valueText =
                    decimalValue == null
                        ? ""
                        : Convert.ToString(
                            decimalValue,
                            CultureInfo.InvariantCulture);

                @if (controlInfo.IsReadOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true"/>
                }
                else
                {
                    <InputText Value="@valueText"
                               ValidationState="@controlInfo.ValidationState"
                               ValueChanged="@controlInfo.SetValueAsync" />
                }
            }

            @if (typeof(string) == property.PropertyType)
            {
                var valueText = property.GetValue(Object)?.ToString() ?? "";

                @if (controlInfo.IsReadOnly)
                {
                    <InputText Value="@valueText"
                               Rows="@(controlInfo.IsMultilineText ? 3 : 1)"
                               Readonly="@true" />
                }
                else
                {
                    if (controlInfo.IsPassword)
                    {
                        <InputPassword ValidationState="@controlInfo.ValidationState"
                                       ValueChanged="@controlInfo.SetValueAsync" />
                    }
                    else
                    {
                        <InputText Value="@valueText"
                                   Rows="@(controlInfo.IsMultilineText ? 3 : 1)"
                                   ValidationState="@controlInfo.ValidationState"
                                   ValueChanged="@controlInfo.SetValueAsync" />
                    }
                }
            }
            
            @if (typeof(DateOnly) == property.PropertyType)
            {
                var valueText = property.GetValue(Object) is DateOnly dateOnly
                    ? dateOnly.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
                    : "";

                @if (controlInfo.IsReadOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true"/>
                }
                else
                {
                    <InputDate Value="@valueText"
                               ValidationState="@controlInfo.ValidationState"
                               ValueChanged="@controlInfo.SetValueAsync" />
                }
            }

            @if (typeof(DateOnly?) == property.PropertyType)
            {
                var valueText =
                    property.GetValue(Object) is DateOnly dateOnlyValue
                        ? dateOnlyValue.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture)
                        : "";

                @if (controlInfo.IsReadOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true"/>
                }
                else
                {
                    <InputDate Value="@valueText"
                               ValidationState="@controlInfo.ValidationState"
                               ValueChanged="@controlInfo.SetValueAsync" />
                }
            }

            @if (controlInfo.HasFeedback)
            {
                <Feedback Content="@controlInfo.ValidationFeedback"
                          ValidationState="@controlInfo.ValidationState"/>
            }
        </div>
    }

    @Controls

    @Actions
</form>