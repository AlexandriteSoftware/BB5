@using System.ComponentModel
@using System.Globalization
@using System.Reflection

<form @onsubmit="HandleSubmit"
      @attributes="@Attributes">
    @foreach (var property in Object?.GetType().GetProperties()
                              ?? Enumerable.Empty<PropertyInfo>())
    {
        var displayNameAttribute =
            property
                .GetCustomAttributes(
                    typeof(DisplayNameAttribute),
                    false)
                .FirstOrDefault() as DisplayNameAttribute;

        var displayName =
            displayNameAttribute?.DisplayName
            ?? property.Name;

        var id = property.Name;

        <div class="mb-3">
            @if (property.PropertyType.IsEnum)
            {
                var propertyValue = property.GetValue(Object);

                <div class="mb-3">
                    <InputLabel Content="@displayName" />
                    <Select Value="@(Enum.GetName(property.PropertyType, propertyValue!))"
                            Items="@(Enum.GetNames(property.PropertyType))"
                            ValueChanged="@(async value =>
                                          {
                                              property.SetValue(Object, Enum.Parse(property.PropertyType, value));
                                              await OnModified.InvokeAsync();
                                          })" />
                    <Feedback Content="@GetValidationFeedback(id)"
                              ValidationState="@GetValidationState(id)" />
                </div>
            }
            
            @if (typeof(bool) == property.PropertyType)
            {
                var propertyValue = property.GetValue(Object) is true;

                <div class="mb-3">
                    <BB5.InputCheckbox Value="@propertyValue"
                                       ValueChanged="@(async value =>
                                                     {
                                                         property.SetValue(Object, value);
                                                         await OnModified.InvokeAsync();
                                                     })"/>
                    <InputCheckLabel Content="@displayName"/>
                    <Feedback Content="@GetValidationFeedback(id)"
                              ValidationState="@GetValidationState(id)" />
                </div>
            }
            
            @if (typeof(int) == property.PropertyType)
            {
                var intValue =
                    (int)(property.GetValue(Object) ?? 0);

                var valueText =
                    Convert.ToString(
                        intValue,
                        CultureInfo.InvariantCulture);

                var readOnly = !property.CanWrite;
                
                <InputLabel Content="@displayName" />
            
                @if (readOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true" />
                }
                else
                {
                    <InputText Value="@valueText"
                               ValidationState="@GetValidationState(id)"
                               ValueChanged="@(async value =>
                                             {
                                                 if (!int.TryParse(
                                                        value,
                                                        CultureInfo.InvariantCulture,
                                                        out var typeValue))
                                                 {
                                                     return;
                                                 }

                                                 property.SetValue(
                                                     Object,
                                                     typeValue);

                                                 await OnModified.InvokeAsync();
                                             })"/>

                    <Feedback Content="@GetValidationFeedback(id)"
                              ValidationState="@GetValidationState(id)" />
                }
            }

            @if (typeof(decimal) == property.PropertyType)
            {
                var intValue =
                    (decimal)(property.GetValue(Object) ?? 0);

                var valueText =
                    Convert.ToString(
                        intValue,
                        CultureInfo.InvariantCulture);

                var readOnly = !property.CanWrite;
                
                <InputLabel Content="@displayName" />
            
                @if (readOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true" />
                }
                else
                {
                    <InputText Value="@valueText"
                               ValidationState="@GetValidationState(id)"
                               ValueChanged="@(async value =>
                                             {
                                                 if (!decimal.TryParse(
                                                         value,
                                                         CultureInfo.InvariantCulture,
                                                         out var typeValue))
                                                 {
                                                     return;
                                                 }

                                                 property.SetValue(
                                                     Object,
                                                     typeValue);

                                                 await OnModified.InvokeAsync();
                                             })"/>

                    <Feedback Content="@GetValidationFeedback(id)"
                              ValidationState="@GetValidationState(id)" />
                }
            }

            @if (typeof(string) == property.PropertyType)
            {
                var valueText = property.GetValue(Object)?.ToString() ?? "";
                var readOnly = !property.CanWrite;
                
                <InputLabel Content="@displayName" />
            
                @if (readOnly)
                {
                    <InputText Value="@valueText"
                               Readonly="@true" />
                }
                else
                {
                    var isPassword =
                        property
                            .GetCustomAttributes(
                                typeof(PasswordPropertyTextAttribute),
                                false)
                            .Any();
                    
                    if (isPassword)
                    {
                        <InputPassword ValidationState="@GetValidationState(id)"
                                       ValueChanged="@(async value =>
                                                     {
                                                         property.SetValue(Object, value);
                                                         await OnModified.InvokeAsync();
                                                     })" />
                    }
                    else
                    {
                        <InputText Value="@valueText"
                                   ValidationState="@GetValidationState(id)"
                                   ValueChanged="@(async value =>
                                                 {
                                                     property.SetValue(Object, value);
                                                     await OnModified.InvokeAsync();
                                                 })"/>
                    }

                    <Feedback Content="@GetValidationFeedback(id)"
                              ValidationState="@GetValidationState(id)" />
                }
            }
        </div>
    }
    
    @Controls

    @Actions
</form>