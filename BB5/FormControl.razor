@{
    if (Model is not { } model)
        return;

    var property = model.PropertyInfo;
    var @object = model.ModifiedObject;
}

@if (model.HasLabel)
{
    <InputLabel Content="@model.DisplayName"
                For="@model.Id" />
}

@if (property.PropertyType.IsEnum)
{
    <Select Value="@model.Text"
            Items="@(Enum.GetNames(property.PropertyType))"
            ValueChanged="model.SetTextAsync"
            Id="@model.Id" />
}

@if (typeof(bool) == property.PropertyType)
{
    var propertyValue = property.GetValue(@object) is true;

    <BB5.InputCheckbox Id="@model.Id"
                       Value="@propertyValue"
                       ValueChanged="@(async value =>
                                     {
                                         property.SetValue(@object, value);
                                         await Modified.InvokeAsync(@object);
                                     })"/>
    <InputCheckLabel Content="@model.DisplayName"
                     For="@model.Id" />
}

@if (typeof(int) == property.PropertyType)
{
    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Readonly="@true"/>
    }
    else
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(int?) == property.PropertyType)
{
    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Readonly="@true"/>
    }
    else
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(decimal) == property.PropertyType)
{
    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Readonly="@true"/>
    }
    else
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(decimal?) == property.PropertyType)
{
    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Readonly="@true"/>
    }
    else
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(string) == property.PropertyType)
{
    @if (model.IsReadOnly)
    {
        if (model.IsMultilineText)
        {
            <InputTextArea Id="@model.Id"
                           Value="@model.Text"
                           Readonly="@true" />
        }
        else
        {
            <InputText Id="@model.Id"
                       Value="@model.Text"
                       Readonly="@true"/>
        }
    }
    else
    {
        if (model.IsPassword)
        {
            <InputPassword Id="@model.Id"
                           ValidationState="@model.ValidationState"
                           ValueChanged="@model.SetTextAsync" />
        }
        else
        {
            if (model.IsMultilineText)
            {
                <InputTextArea Id="@model.Id"
                               Value="@model.Text"
                               ValidationState="@model.ValidationState"
                               ValueChanged="@model.SetTextAsync" />
            }
            else
            {
                <InputText Id="@model.Id"
                           Value="@model.Text"
                           ValidationState="@model.ValidationState"
                           ValueChanged="@model.SetTextAsync" />
            }
        }
    }
}

@if (typeof(DateOnly) == property.PropertyType)
{
    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Readonly="@true"/>
    }
    else
    {
        <InputDate Id="@model.Id"
                   Value="@model.Text"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(DateOnly?) == property.PropertyType)
{
    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Readonly="@true"/>
    }
    else
    {
        <InputDate Id="@model.Id"
                   Value="@model.Text"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (model.HasFeedback)
{
    <Feedback Content="@model.ValidationFeedback"
              ValidationState="@model.ValidationState"/>
}
