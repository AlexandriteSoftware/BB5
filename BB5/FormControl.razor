@using BB5.Models
@{
    if (Model is not { } model)
        return;

    var property = model.PropertyInfo;
}

@if (model.HasLabel)
{
    var properties =
        model.LabelProperties
        ?? new();

    <BB5.Label Content="@model.DisplayName"
               Size="@properties.Size"
               For="@model.Id" />
}

@if (property.PropertyType.IsEnum)
{
    var properties =
        model.ControlProperties as SelectProperties
        ?? new();

    <BB5.Select Value="@model.Text"
                Items="@(Enum.GetNames(property.PropertyType))"
                Size="@properties.Size"
                ValueChanged="model.SetTextAsync"
                Id="@model.Id" />
}

@if (typeof(bool) == property.PropertyType)
{
    <BB5.InputCheckbox Id="@model.Id"
                       Value="@model.Text"
                       ValueChanged="@model.SetTextAsync" />
    <CheckLabel Content="@model.DisplayName"
                     For="@model.Id" />
}

@if (typeof(int) == property.PropertyType)
{
    var properties =
        model.ControlProperties as InputTextProperties
        ?? new();

    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   Readonly="@true"/>
    }
    else
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(int?) == property.PropertyType)
{
    var properties =
        model.ControlProperties as InputTextProperties
        ?? new();

    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   Readonly="@true" />
    }
    else
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(decimal) == property.PropertyType)
{
    var properties =
        model.ControlProperties as InputTextProperties
        ?? new();

    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   Readonly="@true" />
    }
    else
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(decimal?) == property.PropertyType)
{
    var properties =
        model.ControlProperties as InputTextProperties
        ?? new();

    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   Readonly="@true"/>
    }
    else
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(string) == property.PropertyType)
{
    if (model.IsPassword)
    {
        var properties =
            model.ControlProperties as InputPasswordProperties
            ?? new();

        <InputPassword Id="@model.Id"
                       Size="@properties.Size"
                       ValidationState="@model.ValidationState"
                       ValueChanged="@model.SetTextAsync" />
    }
    else if (model.IsTextArea)
    {
        @if (model.IsReadOnly)
        {
            <BB5.TextArea Id="@model.Id"
                          Value="@model.Text"
                          Readonly="@true" />
        }
        else
        {
            <BB5.TextArea Id="@model.Id"
                          Value="@model.Text"
                          ValidationState="@model.ValidationState"
                          ValueChanged="@model.SetTextAsync" />
        }        
    }
    else
    {
        var properties =
            model.ControlProperties as InputTextProperties
            ?? new();

        @if (model.IsReadOnly)
        {
            <InputText Id="@model.Id"
                       Value="@model.Text"
                       Size="@properties.Size"
                       Readonly="@true"/>
        }
        else
        {
            <InputText Id="@model.Id"
                       Value="@model.Text"
                       Size="@properties.Size"
                       Placeholder="@properties.Placeholder"
                       ValidationState="@model.ValidationState"
                       ValueChanged="@model.SetTextAsync" />
        }
    }
}

@if (typeof(DateOnly) == property.PropertyType)
{
    var properties =
        model.ControlProperties as InputDateProperties
        ?? new();

    @if (model.IsReadOnly)
    {
        <InputText Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   Readonly="@true" />
    }
    else
    {
        <InputDate Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (typeof(DateOnly?) == property.PropertyType)
{
    var properties =
        model.ControlProperties as InputDateProperties
        ?? new();

    @if (model.IsReadOnly)
    {
        <InputDate Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   Readonly="@true"/>
    }
    else
    {
        <InputDate Id="@model.Id"
                   Value="@model.Text"
                   Size="@properties.Size"
                   ValidationState="@model.ValidationState"
                   ValueChanged="@model.SetTextAsync" />
    }
}

@if (model.HasFeedback)
{
    <Feedback Content="@model.ValidationFeedback"
              ValidationState="@model.ValidationState"/>
}

@if (!string.IsNullOrEmpty(model.Description))
{
    <div class="form-text">
        @model.Description
    </div>
}
